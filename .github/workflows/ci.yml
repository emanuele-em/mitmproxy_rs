name: CI

on:
  push:
    branches:
      - main
      - macos-redirector
    tags:
      - "*"
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust: stable
          - os: macos-latest
            rust: stable
            args: --exclude windows-redirector
          - os: ubuntu-latest
            rust: stable
            args: --exclude windows-redirector
          - os: windows-latest
            rust: 1.65.0  # MSRV
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Set up Rust toolchain
        run: rustup toolchain install ${{ matrix.rust }} --profile minimal
      - uses: actions/setup-python@v4
        with:
          python-version-file: .github/python-version.txt

      - if: runner.os == 'Windows'
        # workaround for https://github.com/rust-lang/cargo/issues/9096
        run: cargo build --package windows-redirector

      - name: Run "cargo check"
        # the action-rs/cargo action adds inline annotations for "cargo check" output
        uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
        with:
          toolchain: ${{ matrix.rust }}
          command: check
          args: --workspace --verbose ${{ matrix.args }}
      - name: Run "cargo test"
        # the action-rs/cargo action adds inline annotations for "cargo test" output
        uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72
        with:
          toolchain: ${{ matrix.rust }}
          command: test
          args: --workspace --verbose ${{ matrix.args }}

  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
            args: --compatibility manylinux2014 --zig --sdist
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            args: --compatibility manylinux2014 --zig --target aarch64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
            args: --universal2
    runs-on: ${{ matrix.os }}
    name: build-wheel (${{ matrix.os }}, ${{ matrix.target || 'x64' }})
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: rustup toolchain install stable --profile minimal
      - run: rustup default stable
      - if: matrix.target
        run: rustup target add ${{ matrix.target }}
      - run: rustup show
      - uses: actions/setup-python@v4
        with:
          python-version-file: .github/python-version.txt

      - name: Install maturin[zig] from PyPI
        uses: install-pinned/maturin-with-zig@99254730801be3d4d4af4c28b00b97103cbbd1ee

      - if: runner.os == 'Windows'
        # workaround for https://github.com/rust-lang/cargo/issues/9096
        run: cargo build --release --package windows-redirector
        
      - if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
        
      - if: runner.os == 'macOS'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          xcodebuild -project macos-redirector/MitmproxyAppleTunnel.xcodeproj -scheme MitmproxyAppleTunnel -destination 'platform=macOS' PROVISIONING_PROFILE="$PP_PATH" CODE_SIGN_IDENTITY="Apple Development: Maximilian Hils (N72CKJ646S)" OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH" build

  deploy:
    uses: mhils/workflows/.github/workflows/python-deploy.yml@main
    needs: [test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    with:
      artifact: wheels
      # repository: testpypi
      # environment: deploy-testpypi
    secrets:
      password: ${{ secrets.PYPI_TOKEN }}

  check:
    if: always()
    needs:
    - test
    - build
    uses: mhils/workflows/.github/workflows/alls-green.yml@main
    with:
      jobs: ${{ toJSON(needs) }}
